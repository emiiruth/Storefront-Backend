# API Requirements
The company stakeholders want to create an online storefront to showcase their great product ideas. Users need to be able to browse an index of all products, see the specifics of a single product, and add products to an order that they can view in a cart page. You have been tasked with building the API that will support this application, and your coworker is building the frontend.
These are the notes from a meeting with the frontend developer that describe what endpoints the API needs to supply, as well as data shapes the frontend and backend have agreed meet the requirements of the application. 

## API Endpoints
Orders:
-POST /orders: create method, creates and returns a new order
-GET /orders: index method, returns all orders
-GET /orders/:id: show method, returns specified order
-POST /orders/:id/products: addProduct method, adds a specified product to a specified order and returns it
-GET /orders/:id/products: showProducts method, returns a specified order with all products added to it

Users:
-POST /users: create method, creates and returns a new user
-GET /users: index method, returns all users
-GET /users/:id: show method, returns specified user
-GET /listusers: index method that returns all users that have an open order

Products: 
-POST /products: create method, creates and returns a new product
-GET /products: index method, returns all products
-GET /products/:id: show method, returns specified product
-GET /topFive: index method that returns the top five most expensive products


## Data Shapes
Products:
id SERIAL PRIMARY KEY,
name VARCHAR(64) NOT NULL,
price integer NOT NULL);

Users:
id SERIAL PRIMARY KEY, 
first_name VARCHAR, 
last_name VARCHAR,
password_digest VARCHAR

Orders:
id SERIAL PRIMARY KEY, 
status VARCHAR(15), 
user_ID SERIAL REFERENCES users(id));
(in order-products table)
id SERIAL PRIMARY KEY, 
quantity integer, 
order_ID bigint REFERENCES orders(ID), 
product_ID bigint REFERENCES products(ID));


